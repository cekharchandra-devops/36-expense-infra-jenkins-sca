pipeline{
     agent {
        label 'AGENT-1'
    }
    options{
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        //retry(1)
    }
     environment {
        appVersion = '' // this will become global, we can use across pipeline
        region = 'us-east-1'
        account_id = '528757792370'
        project = 'expense'
        environment = 'dev'
        component = 'backend'
    }

    stages{
        stage('read the version'){
            steps{
                dir('backend') {
                    script{
                        def packageJson = readJSON file: 'package.json'
                        appVersion = packageJson.version
                        echo "App Version: ${appVersion}"
                    }
                }
            }
        }
         stage('install dependencies'){
            steps{
                dir('backend') {
                    sh 'npm install'
                }
            }
        }
        stage('SonarQube analysis') {
            environment {
                SCANNER_HOME = tool 'sonar-6.0' //scanner config
            }
            steps {
                //sonar server injection
                withSonarQubeEnv('sonar-6.0') {
                     dir('backend') {
                        sh '$SCANNER_HOME/bin/sonar-scanner'
                     }
                }
            }
        }
        stage('SQuality Gate') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
         }
        // stage('SonarQube Scan') {
        //     steps {
        //         withSonarQubeEnv('SonarQube') { // 'SonarQube' is the name of the SonarQube server configured in Jenkins
        //             dir('backend') {
        //                 sh """
        //                     sonar-scanner \
        //                     -Dsonar.projectKey=${project}-${environment}-${component} \
        //                     -Dsonar.sources=. \
        //                     -Dsonar.host.url=http://your-sonarqube-server:9000 \
        //                     -Dsonar.login=${SONARQUBE_TOKEN} \
        //                     -Dsonar.projectVersion=${appVersion} \
        //                     -Dsonar.language=js \
        //                     -Dsonar.sourceEncoding=UTF-8
        //                 """
        //             }
        //         }
        //     }
        // }
        stage('docker image'){
           steps{
                withAWS(region: 'us-east-1', credentials: 'aws-creds-dev') {
                    dir('backend') {
                        sh """
                            aws ecr get-login-password --region ${region} | docker login --username AWS --password-stdin ${account_id}.dkr.ecr.${region}.amazonaws.com
                            docker build -t ${account_id}.dkr.ecr.${region}.amazonaws.com/${project}/${environment}/${component}:${appVersion} .
                            docker images
                            docker push ${account_id}.dkr.ecr.${region}.amazonaws.com/${project}/${environment}/${component}:${appVersion}
                        """
                    }
                }
           }
        }

        stage('deploy application'){
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-creds-dev') {
                    dir('backend'){
                        sh """
                            aws eks update-kubeconfig --region ${region} --name ${project}-${environment}
                            helm upgrade --install ${component} ./helm \
                            -f ./backend-values.yml \
                            --set deployment.image.prefix=${account_id}.dkr.ecr.${region}.amazonaws.com/${project}/${environment}/${component} \
                            --set deployment.image.tag=${appVersion} 
                        """
                    }
                }
            }
        }
    }
    post {
        always {
            deleteDir()
        }
    }
}